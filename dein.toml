[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#whitespace#mixed_indent_algo = 1
let g:airline_theme = 'gotham256'
let g:airline#extensions#term#enabled = 0

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

let g:airline_left_sep = '¬ª'
let g:airline_left_sep = '‚ñ∂'
let g:airline_right_sep = '¬´'
let g:airline_right_sep = '‚óÄ'
let g:airline_symbols.crypt = 'üîí'
let g:airline_symbols.linenr = '‚êä'
let g:airline_symbols.linenr = '‚ê§'
let g:airline_symbols.linenr = '¬∂'
let g:airline_symbols.maxlinenr = '‚ò∞'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.paste = 'œÅ'
let g:airline_symbols.paste = '√û'
let g:airline_symbols.paste = '‚à•'
let g:airline_symbols.spell = 'Íû®'
let g:airline_symbols.notexists = '‚àÑ'
let g:airline_symbols.whitespace = 'Œû'

let g:airline_left_sep = 'ÓÇ∞'
let g:airline_left_alt_sep = 'ÓÇ±'
let g:airline_right_sep = 'ÓÇ≤'
let g:airline_right_alt_sep = 'ÓÇ≥'
let g:airline_symbols.branch = 'ÓÇ†'
let g:airline_symbols.readonly = 'ÓÇ¢'
let g:airline_symbols.linenr = 'ÓÇ°'

let g:airline_right_sep = '‚ÆÇ'
let g:airline_right_alt_sep = '‚ÆÉ'
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
depends = ['vim-airline']

[[plugins]]
repo = 'kannokanno/previm'
hook_add = '''
nnoremap <silent> <C-p> :PrevimOpen<CR>
let g:vim_markdown_folding_disabled = 1
let g:previm_enable_realtime = 1
'''

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>
                \ defx#do_action('open')
    nnoremap <silent><buffer><expr> c
                \ defx#do_action('copy')
    nnoremap <silent><buffer><expr> m
                \ defx#do_action('move')
    nnoremap <silent><buffer><expr> p
                \ defx#do_action('paste')
    nnoremap <silent><buffer><expr> l
                \ defx#do_action('open')
    nnoremap <silent><buffer><expr> E
                \ defx#do_action('open', 'vsplit')
    nnoremap <silent><buffer><expr> P
                \ defx#do_action('open', 'pedit')
    nnoremap <silent><buffer><expr> o
                \ defx#do_action('open_or_close_tree')
    nnoremap <silent><buffer><expr> K
                \ defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> N
                \ defx#do_action('new_file')
    nnoremap <silent><buffer><expr> M
                \ defx#do_action('new_multiple_files')
    nnoremap <silent><buffer><expr> C
                \ defx#do_action('toggle_columns',
                \                'mark:filename:type:size:time')
    nnoremap <silent><buffer><expr> S
                \ defx#do_action('toggle_sort', 'time')
    nnoremap <silent><buffer><expr> d
                \ defx#do_action('remove')
    nnoremap <silent><buffer><expr> r
                \ defx#do_action('rename')
    nnoremap <silent><buffer><expr> !
                \ defx#do_action('execute_command')
    nnoremap <silent><buffer><expr> x
                \ defx#do_action('execute_system')
    nnoremap <silent><buffer><expr> yy
                \ defx#do_action('yank_path')
    nnoremap <silent><buffer><expr> .
                \ defx#do_action('toggle_ignored_files')
    nnoremap <silent><buffer><expr> ;
                \ defx#do_action('repeat')
    nnoremap <silent><buffer><expr> h
                \ defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> ~
                \ defx#do_action('cd')
    nnoremap <silent><buffer><expr> q
                \ defx#do_action('quit')
    nnoremap <silent><buffer><expr> <Space>
                \ defx#do_action('toggle_select') . 'j'
    nnoremap <silent><buffer><expr> *
                \ defx#do_action('toggle_select_all')
    nnoremap <silent><buffer><expr> j
                \ line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k
                \ line('.') == 1 ? 'G' : 'k'
    nnoremap <silent><buffer><expr> <C-l>
                \ defx#do_action('redraw')
    nnoremap <silent><buffer><expr> <C-g>
                \ defx#do_action('print')
    nnoremap <silent><buffer><expr> cd
                \ defx#do_action('change_vim_cwd')
endfunction
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = 'vim-devicons'
hook_add = '''

autocmd FileType denite call s:denite_my_settings()
	function! s:denite_my_settings() abort
	  nnoremap <silent><buffer><expr> <CR>
	  \ denite#do_map('do_action')
	  nnoremap <silent><buffer><expr> d
	  \ denite#do_map('do_action', 'delete')
	  nnoremap <silent><buffer><expr> p
	  \ denite#do_map('do_action', 'preview')
	  nnoremap <silent><buffer><expr> q
	  \ denite#do_map('quit')
	  nnoremap <silent><buffer><expr> i
	  \ denite#do_map('open_filter_buffer')
	  nnoremap <silent><buffer><expr> <Space>
	  \ denite#do_map('toggle_select').'j'
	endfunction
'''

[[plugins]]
repo ='flazz/vim-colorschemes'

[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
let g:user_emmet_settings = {
            \    'variables': {
            \      'lang': "ja"
            \    },
            \   'indentation': '  '
            \ }
'''

[[plugins]]
repo = 'tpope/vim-surround'


[[plugins]]
repo = 'tpope/vim-markdown'

[[plugins]]
repo = 'mattn/webapi-vim'

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'whatyouhide/vim-gotham'

[[plugins]]
repo = 'sheerun/vim-polyglot'

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'kazukazuinaina/Tweet.vim'

[[plugins]]
repo = 'vim-jp/autofmt'

[[plugins]]
repo = 'kazukazuinaina/commentout.vim'

[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
let g:webdevicons_enable_denite = 0
'''

[[plugins]]
repo = 'kristijanhusak/defx-icons'
hook_add = '''
let g:defx_icons_enable_syntax_highlight = 1
let g:defx_icons_column_length = 2
let g:defx_icons_directory_icon = 'Óóø'
let g:defx_icons_mark_icon = '*'
let g:defx_icons_parent_icon = 'Óóæ'
let g:defx_icons_default_icon = 'Óòí'
let g:defx_icons_directory_symlink_icon = 'ÔíÇ'
" Options below are applicable only when using "tree" feature
let g:defx_icons_root_opened_tree_icon = 'Óóæ'
let g:defx_icons_nested_opened_tree_icon = 'Óóæ'
let g:defx_icons_nested_closed_tree_icon = 'Óóø'
'''

[[plugins]]
repo = 'dense-analysis/ale'
on_ft = ['vim', 'python']

[[plugins]]
repo = 'tyru/open-browser-github.vim'

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
on_ft = ['python', 'go']
depends = ['async.vim', 'deoplete-vim-lsp']
hook_add = '''
let g:lsp_diagnostics_echo_cursor = 1
'''

[[plugins]]
repo ='lambdalisue/gina.vim'
hook_add = '''
call gina#custom#command#option('status', '--opener', 'vsplit')
call gina#custom#command#option('diff', '--opener', 'vsplit')
'''

[[plugins]]
repo = 'jceb/vim-orgmode'

[[plugins]]
repo = 'itchyny/calendar.vim'

[[plugins]]
repo = 'glidenote/memolist.vim'
hook_add = '''
let g:memolist_denite = 1
'''

[[plugins]]
repo = 'kazukazuinaina/Weather.vim'
